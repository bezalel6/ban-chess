version: '3.8'

services:
  # PostgreSQL Database (optional - can use external Supabase instead)
  postgres:
    image: supabase/postgres:15.1.0.117
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d/migrations
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DB: ${POSTGRES_DB:-next_chess}
      POSTGRES_HOST: /var/run/postgresql
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      POSTGRES_HOST_AUTH_METHOD: md5
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-next_chess}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - coolify
    labels:
      - coolify.managed=true

  # Next.js Chess Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        # These should point to your external Supabase instance
        NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY}
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-3000}
      # REQUIRED: Set these in your Coolify environment variables
      # Get these from your Supabase project settings at https://app.supabase.com
      NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      # Direct database connection to local PostgreSQL
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/${POSTGRES_DB:-next_chess}
      SKIP_ENV_VALIDATION: ${SKIP_ENV_VALIDATION:-true}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - coolify
    labels:
      - coolify.managed=true
      - traefik.enable=true
      - traefik.http.routers.app.rule=Host(`chess.rndev.site`)
      - traefik.http.routers.app.entrypoints=http
      - traefik.http.services.app.loadbalancer.server.port=3000

volumes:
  postgres_data:
    driver: local

networks:
  coolify:
    external: true